//! Main example demonstrating the Rust version of bel

use bel::{extract, generator};

fn main() -> Result<(), Box<dyn std::error::Error>> {
    let source = r#"
        /// A demo struct for testing TypeScript generation
        pub struct Demo {
            /// The foo field (optional)
            pub foo: Option<String>,
            /// The bar field
            pub bar: u32,
            /// Nested structure
            pub baz: NestedStruct,
        }

        /// A nested structure
        pub struct NestedStruct {
            pub first_field: bool,
            pub second_field: Option<String>,
        }

        /// Demo service trait
        pub trait DemoService {
            /// Say hello to someone
            fn say_hello(&self, name: String, msg: String) -> String;
        }

        /// Status enumeration
        pub enum Status {
            Active,
            Inactive,
            Pending,
        }
    "#;

    println!("Extracting TypeScript types from Rust code...\n");

    let extract_options = extract::ExtractOptions {
        follow_structs: true,
        sort_alphabetically: true,
        ..Default::default()
    };

    let generator_options = generator::GeneratorOptions {
        preamble: Some("// Generated by bel (Rust version)\n// DO NOT MODIFY".to_string()),
        ..Default::default()
    };

    let result = bel::extract_and_generate(source, extract_options, generator_options)?;
    println!("{}", result);

    Ok(())
}
